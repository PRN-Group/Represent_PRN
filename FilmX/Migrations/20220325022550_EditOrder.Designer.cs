// <auto-generated />
using System;
using FilmX.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FilmX.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220325022550_EditOrder")]
    partial class EditOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("FilmX.Data.Entities.CostTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("costTickets");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Directors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LimitAge")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfViews")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVote")
                        .HasColumnType("int");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalVote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(1363),
                            Directors = "Ngoc Hoi",
                            Duration = 150,
                            ImagePath = "batman.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(2096),
                            Name = "Bat Man",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Joker",
                            PublicDate = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(3043),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4412),
                            Directors = "Illa Oi",
                            Duration = 150,
                            ImagePath = "spiderman.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4414),
                            Name = "Spiderman",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Ngoc Hoi",
                            PublicDate = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4416),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4419),
                            Directors = "Missfortune",
                            Duration = 150,
                            ImagePath = "supper.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4421),
                            Name = "Supperman",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Vi",
                            PublicDate = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4422),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4425),
                            Directors = "Jayce",
                            Duration = 150,
                            ImagePath = "thor.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4426),
                            Name = "Thor Ranarok",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Vi",
                            PublicDate = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4427),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4431),
                            Directors = "Olivia Giroud",
                            Duration = 150,
                            ImagePath = "iron.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4432),
                            Name = "Ironman 3",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Gumayusy",
                            PublicDate = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(4434),
                            Status = true,
                            TotalVote = 5
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.FilmCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("filmCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 50, DateTimeKind.Local).AddTicks(8994),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 50, DateTimeKind.Local).AddTicks(9597),
                            Name = "Chelsea"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(162),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(164),
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(166),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 25, 9, 25, 50, 51, DateTimeKind.Local).AddTicks(168),
                            Name = "Real"
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CostTicketID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("SeatID")
                        .HasColumnType("int");

                    b.Property<int>("ShowTimeID")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostTicketID");

                    b.HasIndex("FilmID");

                    b.HasIndex("RoomID");

                    b.HasIndex("SeatID");

                    b.HasIndex("ShowTimeID");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeRow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 49, DateTimeKind.Local).AddTicks(4353),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R1",
                            SizeRow = 8
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 49, DateTimeKind.Local).AddTicks(8908),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R2",
                            SizeRow = 8
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 49, DateTimeKind.Local).AddTicks(8924),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R3",
                            SizeRow = 8
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 3, 25, 9, 25, 50, 49, DateTimeKind.Local).AddTicks(8926),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R4",
                            SizeRow = 8
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<short>("TypeSeat")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("seats");
                });

            modelBuilder.Entity("FilmX.Data.Entities.ShowTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("FilmId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeShow")
                        .HasColumnType("datetime2");

                    b.Property<short>("TypeFilm")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("RoomId");

                    b.ToTable("showTimes");
                });

            modelBuilder.Entity("FilmX.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FilmX.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "10a1c51b-f43d-4650-aad8-7a78186459a2",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "be19b31b-7600-4fe0-bcfa-c8f7b6e2f119",
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.HasOne("FilmX.Data.Entities.FilmCategory", "Category")
                        .WithMany("Films")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Order", b =>
                {
                    b.HasOne("FilmX.Data.Entities.CostTicket", "CostTicket")
                        .WithMany()
                        .HasForeignKey("CostTicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.Room", "room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.ShowTime", "showTime")
                        .WithMany()
                        .HasForeignKey("ShowTimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostTicket");

                    b.Navigation("Film");

                    b.Navigation("room");

                    b.Navigation("Seat");

                    b.Navigation("showTime");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Seat", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FilmX.Data.Entities.ShowTime", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Film", "Film")
                        .WithMany("ShowTimes")
                        .HasForeignKey("FilmId");

                    b.HasOne("FilmX.Data.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Film");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("FilmX.Data.Entities.FilmCategory", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
