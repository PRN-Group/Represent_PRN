// <auto-generated />
using System;
using FilmX.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FilmX.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("FilmX.Data.Entities.CostTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("TypeFilm")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("costTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(5845),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Film 2D",
                            Price = 10m,
                            TypeFilm = (short)0
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(6925),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Film 3D",
                            Price = 15m,
                            TypeFilm = (short)1
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Directors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LimitAge")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfViews")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVote")
                        .HasColumnType("int");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalVote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(7939),
                            Directors = "Ngoc Hoi",
                            Duration = 150,
                            ImagePath = "batman.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(8519),
                            Name = "Bat Man",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Joker",
                            PublicDate = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(9280),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(248),
                            Directors = "Illa Oi",
                            Duration = 150,
                            ImagePath = "spiderman.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(250),
                            Name = "Spiderman",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Ngoc Hoi",
                            PublicDate = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(251),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(254),
                            Directors = "Missfortune",
                            Duration = 150,
                            ImagePath = "supper.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(255),
                            Name = "Supperman",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Vi",
                            PublicDate = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(256),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(258),
                            Directors = "Jayce",
                            Duration = 150,
                            ImagePath = "thor.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(259),
                            Name = "Thor Ranarok",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Vi",
                            PublicDate = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(260),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(262),
                            Directors = "Olivia Giroud",
                            Duration = 150,
                            ImagePath = "iron.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(263),
                            Name = "Ironman 3",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Gumayusy",
                            PublicDate = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(264),
                            Status = true,
                            TotalVote = 5
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.FilmCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("filmCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(4333),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(4834),
                            Name = "Chelsea"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(5402),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(5404),
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(5406),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 27, 13, 50, 37, 817, DateTimeKind.Local).AddTicks(5407),
                            Name = "Real"
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("FilmX.Data.Entities.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("ShowTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowTimeId");

                    b.ToTable("orderDetails");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 815, DateTimeKind.Local).AddTicks(9537),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R1"
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 816, DateTimeKind.Local).AddTicks(6488),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R2"
                        },
                        new
                        {
                            Id = 3,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 816, DateTimeKind.Local).AddTicks(6502),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R3"
                        },
                        new
                        {
                            Id = 4,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 816, DateTimeKind.Local).AddTicks(6504),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R4"
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("ShowTimeId");

                    b.ToTable("seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(4890),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 1,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5555),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 2,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5560),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 3,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5561),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 4,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5562),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 5,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5565),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 6,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5566),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 7,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5567),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 8,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5568),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 9,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5569),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 10,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5571),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 11,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5571),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 12,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5573),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 13,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5573),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 14,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5574),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 15,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5575),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 16,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5576),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 17,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5578),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 18,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5579),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 19,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(5580),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 20,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.ShowTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeShow")
                        .HasColumnType("datetime2");

                    b.Property<short>("TypeFilm")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("RoomId");

                    b.ToTable("showTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 818, DateTimeKind.Local).AddTicks(761),
                            FilmId = 3,
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 0.0,
                            RoomId = 1,
                            TimeShow = new DateTime(2020, 1, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeFilm = (short)0
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 27, 13, 50, 37, 823, DateTimeKind.Local).AddTicks(2823),
                            FilmId = 3,
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 0.0,
                            RoomId = 1,
                            TimeShow = new DateTime(2020, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeFilm = (short)0
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FilmX.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f1d284b7-e793-4c1e-8cff-8dc4b21c2b13",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "40ceec71-1986-4cee-90df-bfb2b72e8ea3",
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.HasOne("FilmX.Data.Entities.FilmCategory", "Category")
                        .WithMany("Films")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Order", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmX.Data.Entities.OrderDetails", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.ShowTime", "ShowTime")
                        .WithMany()
                        .HasForeignKey("ShowTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Seat");

                    b.Navigation("ShowTime");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Seat", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.ShowTime", "ShowTime")
                        .WithMany()
                        .HasForeignKey("ShowTimeId");

                    b.Navigation("Room");

                    b.Navigation("ShowTime");
                });

            modelBuilder.Entity("FilmX.Data.Entities.ShowTime", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Film", "Film")
                        .WithMany("ShowTimes")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("FilmX.Data.Entities.FilmCategory", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
