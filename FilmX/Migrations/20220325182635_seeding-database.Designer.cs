// <auto-generated />
using System;
using FilmX.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FilmX.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220325182635_seeding-database")]
    partial class seedingdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("FilmX.Data.Entities.CostTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("TypeFilm")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("costTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(7814),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Film 2D",
                            Price = 10m,
                            TypeFilm = (short)0
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(9066),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Film 3D",
                            Price = 15m,
                            TypeFilm = (short)1
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Directors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LimitAge")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfViews")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVote")
                        .HasColumnType("int");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalVote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(571),
                            Directors = "Ngoc Hoi",
                            Duration = 150,
                            ImagePath = "batman.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(1382),
                            Name = "Bat Man",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Joker",
                            PublicDate = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(2446),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3805),
                            Directors = "Illa Oi",
                            Duration = 150,
                            ImagePath = "spiderman.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3808),
                            Name = "Spiderman",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Ngoc Hoi",
                            PublicDate = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3811),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3815),
                            Directors = "Missfortune",
                            Duration = 150,
                            ImagePath = "supper.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3817),
                            Name = "Supperman",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Vi",
                            PublicDate = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3819),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3823),
                            Directors = "Jayce",
                            Duration = 150,
                            ImagePath = "thor.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3826),
                            Name = "Thor Ranarok",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Vi",
                            PublicDate = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3827),
                            Status = true,
                            TotalVote = 5
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Country = "Viet Nam",
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3831),
                            Directors = "Olivia Giroud",
                            Duration = 150,
                            ImagePath = "iron.jpg",
                            IsDeleted = false,
                            LimitAge = 18,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3832),
                            Name = "Ironman 3",
                            NumOfViews = 1200,
                            NumberOfVote = 5,
                            Producer = "Gumayusy",
                            PublicDate = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(3834),
                            Status = true,
                            TotalVote = 5
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.FilmCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("filmCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(5871),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(6584),
                            Name = "Chelsea"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(7232),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(7234),
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(7237),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2022, 3, 26, 1, 26, 35, 79, DateTimeKind.Local).AddTicks(7239),
                            Name = "Real"
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("FilmX.Data.Entities.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowTimeId");

                    b.ToTable("orderDetails");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 77, DateTimeKind.Local).AddTicks(9746),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R1"
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 78, DateTimeKind.Local).AddTicks(4401),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R2"
                        },
                        new
                        {
                            Id = 3,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 78, DateTimeKind.Local).AddTicks(4418),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R3"
                        },
                        new
                        {
                            Id = 4,
                            AvailableSeats = 40,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 78, DateTimeKind.Local).AddTicks(4421),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "R4"
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(6558),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 1,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7422),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 2,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7429),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 3,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7430),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 4,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7432),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 5,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7458),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 6,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7459),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 7,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7461),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 8,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7462),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 9,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7465),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 10,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7466),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 11,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7468),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 12,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7469),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 13,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7470),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 14,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7472),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 15,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7474),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 16,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7475),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 17,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7478),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 18,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7479),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 19,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2022, 3, 26, 1, 26, 35, 80, DateTimeKind.Local).AddTicks(7481),
                            IsDeleted = false,
                            IsEmpty = true,
                            Location = 20,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1
                        });
                });

            modelBuilder.Entity("FilmX.Data.Entities.ShowTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeShow")
                        .HasColumnType("datetime2");

                    b.Property<short>("TypeFilm")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("RoomId");

                    b.ToTable("showTimes");
                });

            modelBuilder.Entity("FilmX.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FilmX.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "8747f1cd-3e65-4ddb-9f22-95ab3bf6a80d",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "d19c18d7-5a77-44a8-84a4-c183a251ef3c",
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.HasOne("FilmX.Data.Entities.FilmCategory", "Category")
                        .WithMany("Films")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Order", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmX.Data.Entities.OrderDetails", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("FilmX.Data.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");

                    b.HasOne("FilmX.Data.Entities.ShowTime", "ShowTime")
                        .WithMany()
                        .HasForeignKey("ShowTimeId");

                    b.Navigation("Order");

                    b.Navigation("Seat");

                    b.Navigation("ShowTime");
                });

            modelBuilder.Entity("FilmX.Data.Entities.Seat", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FilmX.Data.Entities.ShowTime", b =>
                {
                    b.HasOne("FilmX.Data.Entities.Film", "Film")
                        .WithMany("ShowTimes")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FilmX.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmX.Data.Entities.Film", b =>
                {
                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("FilmX.Data.Entities.FilmCategory", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
